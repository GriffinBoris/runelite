package net.runelite.client.plugins.alfred.event;

import lombok.Getter;
import lombok.Setter;
import net.runelite.client.plugins.alfred.Alfred;
import net.runelite.client.ui.ClientUI;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.Arrays;

public class EventHandler extends EventQueue {

    static class UnblockedEvent extends AWTEvent {

        public AWTEvent event;

        public UnblockedEvent(AWTEvent event) {
            super(event.getSource(), event.getID());
            this.event = event;
        }
    }

    @Getter
    @Setter
    private boolean blocked;
    private final Canvas gameCanvas;
    private final JFrame gameFrame;

    public EventHandler() {
        blocked = false;
        gameCanvas = Alfred.getClient().getCanvas();
        gameFrame = ClientUI.getFrame();
    }

    public boolean isBlocking() {
        return blocked;
    }

    public void dispatchUnblockedEvent(AWTEvent event) {
        if (event != null && event.getSource() != null) {
            postEvent(new UnblockedEvent(event));
        }
    }

    @Override
    protected void dispatchEvent(AWTEvent event) {
        if (event instanceof UnblockedEvent) {
            handleDispatchedEvent(((UnblockedEvent) event).event, true);
        } else {
            handleDispatchedEvent(event, false);
        }
    }

    private void handleDispatchedEvent(AWTEvent event, boolean isUnblockedEvent) {
        Object eventSource = event.getSource();

//        if (event instanceof FocusEvent && blocked) {
//            return;
//        }

//        boolean[] gameCanvasEvent = {
//                event instanceof KeyEvent,
//                event instanceof MouseWheelEvent,
//                event instanceof WindowEvent,
//                event instanceof MouseEvent
//        };
//
//        boolean[] gameFrameEvent = {
//                event instanceof KeyEvent
//        };

//        System.out.println(Arrays.asList(gameFrameEvent).contains(true));
//         print out all members of gameCanvasEvent
//        for (boolean b : gameCanvasEvent) {
//            System.out.println(b);
//        }

        if (isUnblockedEvent) {
            ((Component) eventSource).dispatchEvent(event);

//        } else if (eventSource == gameCanvas && (event instanceof KeyEvent || event instanceof WindowEvent || event instanceof MouseEvent)) {
//            if (!blocked) {
//                super.dispatchEvent(event);
//                System.out.println("test blocked canvas");
//            }
//
//        } else if (eventSource == gameFrame) {
//            if (!blocked && event instanceof KeyEvent) {
//                super.dispatchEvent(event);
//                System.out.println("test blocked frame");
//            }

        } else {
            super.dispatchEvent(event);
        }
    }

    private void handleGameCanvas(AWTEvent event, boolean unblocked) {
        if (event instanceof KeyEvent || event instanceof MouseWheelEvent || event instanceof WindowEvent || event instanceof MouseEvent) {
            if (!blocked || unblocked) {
                super.dispatchEvent(event);
            }
        } else {
            super.dispatchEvent(event);
        }
    }

    private void handleGameFrame(AWTEvent event, boolean unblocked) {
        if (event instanceof KeyEvent) {
            if (!blocked || unblocked) {
                System.out.println(((KeyEvent) event).getKeyCode());
                super.dispatchEvent(event);
            }
        } else {
            super.dispatchEvent(event);
        }
    }
}
